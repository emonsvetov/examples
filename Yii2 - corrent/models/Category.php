<?php

namespace app\models;

use Yii;
use yii\data\ActiveDataProvider;
use app\models\scopes\CategoryQuery;

/**
 * This is the model class for table "ca1_category".
 *
 * @property int $CA1_ID
 * @property int $C00_ID
 * @property int $CA0_ID
 * @property int $CO1_ID
 * @property string $CA1_NAME
 * @property string $CA1_DESCRIPTION
 * @property int $CA1_NO_INVENTORY
 * @property int $CA1_DELETE_FLAG
 * @property int $CA1_CREATED_BY
 * @property string $CA1_CREATED_ON
 * @property int $CA1_MODIFIED_BY
 * @property string $CA1_MODIFIED_ON
 */
class Category extends ActiveRecord
{
    protected $_tablePrefix = 'CA1';

	public $CO1_NAME;
	public $C00_NAME;

    public static function find()
    {
        return new CategoryQuery(get_called_class());
    }

    public function getCompany()
    {
        return $this->hasOne(Company::className(), ['CO1_ID' => 'CO1_ID']);
    }

	public function fields() {
		$fields = parent::fields();
		$fields["CO1_NAME"] = function($model){ return $model->CO1_NAME; };
		$fields["C00_NAME"] = function($model){ return $model->C00_NAME; };
		return $fields;
	}

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'ca1_category';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['CA1_ID', 'C00_ID', 'CA0_ID', 'CO1_ID', 'CA1_NO_INVENTORY', 'CA1_DELETE_FLAG', 'CA1_CREATED_BY', 'CA1_MODIFIED_BY'], 'integer'],
            [['CA1_CREATED_ON', 'CA1_MODIFIED_ON'], 'safe'],
            [['CA1_NAME'], 'string', 'max' => 10],
            [['CA1_DESCRIPTION', 'CO1_NAME', 'C00_NAME'], 'string', 'max' => 100],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'CA1_ID' => 'Ca1  ID',
            'C00_ID' => 'C00  ID',
	        'CA0_ID' => 'Ca0  ID',
            'CO1_ID' => 'Co1  ID',
            'CA1_NAME' => 'Ca1  Name',
            'CA1_DESCRIPTION' => 'Ca1  Description',
            'CA1_NO_INVENTORY' => 'Ca1  No  Inventory',
            'CA1_DELETE_FLAG' => 'Ca1  Delete  Flag',
            'CA1_CREATED_BY' => 'Ca1  Created  By',
            'CA1_CREATED_ON' => 'Ca1  Created  On',
            'CA1_MODIFIED_BY' => 'Ca1  Modified  By',
            'CA1_MODIFIED_ON' => 'Ca1  Modified  On',
        ];
    }

    /**
     * @param $params
     * @return \yii\db\ActiveQuery
     */
    public function getSearchQuery( $params )
    {
        $query = self::find()->alias('CA1')->select([
                'CA1.*',
                'CA1_CREATED_BY_NAME'  => 'us1_create.US1_NAME',
                'CA1_MODIFIED_BY_NAME' => 'us1_modify.US1_NAME',
                'CO1.CO1_NAME',
                'C00.C00_NAME'
            ])
            ->leftJoin("co1_company  as CO1" ,    "CO1.CO1_ID = CA1.CO1_ID AND CO1.CO1_DELETE_FLAG=0")
            ->leftJoin("c00_category as C00" ,    "C00.C00_ID = CA1.C00_ID AND C00.C00_DELETE_FLAG=0")
            ->leftJoin("us1_user as us1_create" , "us1_create.US1_ID = CA1.CA1_CREATED_BY")
            ->leftJoin("us1_user as us1_modify" , "us1_modify.US1_ID = CA1.CA1_MODIFIED_BY");

        $this->load($params, '');
        $query->andFilterWhere(['=',    'CA1_ID',   $this->CA1_ID]);
        $query->andFilterWhere(['like', 'CA1_NAME', $this->CA1_NAME]);
        $query->initScope();

        return $query;
    }

    public function search($params)
    {
        $defaultOrder = [];
        if(!empty($params['sort'])){
            foreach( $params['sort'] as $sort){
                list($prop, $dir) = explode(',', $sort);
                $defaultOrder[$prop] = $dir == 'asc' ? SORT_ASC : SORT_DESC;
            }
        }else{
            $defaultOrder['CO1_ID']   = SORT_ASC;
            $defaultOrder['CA1_NAME'] = SORT_ASC;
        }

        $query = $this->getSearchQuery( $params );

        $dataProvider = new ActiveDataProvider([
            'query'      => $query,
            'pagination' => [
                'pageSize' => $params['perPage']
            ],
             'sort' => [
                'defaultOrder' => $defaultOrder
            ]
        ]);

        return $dataProvider;
    }

    public function beforeValidate()
    {
        if( isset( $this->CA1_NO_INVENTORY )){
            $this->CA1_NO_INVENTORY = $this->CA1_NO_INVENTORY ? 1 : 0;
        }

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
}
